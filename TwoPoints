3,Two Points code template
滑动窗⼝ (90%) 
时间复杂度要求 O(n) (80%是双指针) 
要求原地操作，只可以使⽤交换，不能使⽤额外空间 (80%) 
有⼦数组 subarray /⼦字符串 substring 的关键词 (50%) 
有回⽂ Palindrome 关键词(50%) 
时间复杂度：O(n) 时间复杂度与最内层循环主体的执⾏次数有关 与有多少重循环⽆关 
空间复杂度：O(1) 只需要分配两个指针的额外内存
3.1 Opposite two pointers
    // Opposite two pointers(patition in quicksort) -- while(left<=right){while-left++-while-right--}
    public void patition(int[] A, int start, int end) {
        if (start >= end) {
            return;
        }
        int left = start, right = end;
        // key point 1: pivot is the value, not the index 14. 15. 8. int pivot = A[(start + end) / 2];
        // key point 2: every time you compare left & right, it should be 18. 19. 10. // left <= right not left < right
        while (left <= right) {
            while (left <= right && A[left] < pivot) {
                left++;
            }
            while (left <= right && A[right] > pivot) {
                right--;
            }
            if (left <= right) {
                int temp = A[left];
                A[left] = A[right];
                A[right] = temp;
                left++;
                right--;
            }
        }
    }
    
3.1.1 Two-Pointers-Template-for-nSum problem: 
https://leetcode.com/problems/3sum/discuss/820254/Two-Pointers-Template-for-such-problems-!-Python3-AC(for-while template, translated to java)
--for{while(left<right){left++right--}}
https://leetcode.com/problems/3sum/submissions/ (can use for-while template)

3.2 same-direction two pointers
--for-begin-{while-end+-if-begin-end}
    // 同向双指针
    int end = 0;
    for (int begin = 0; begin < n; begin++) {
        // 不满足则循环到满足搭配为止
        while (end < n && begin 到 end 之间不满足条件) {
            end += 1;
        }
        if (begin 到 end 之间满足条件) {
            处理 begin，end 这次搭配
        }
    }

3.2.1 https://leetcode.com/problems/binary-subarrays-with-sum/discuss/1353347/Java-3-O(N)-Time-Solutions

3.2.2 https://leetcode.com/problems/minimum-window-substring/discuss/26808/Here-is-a-10-line-template-that-can-solve-most-'substring'-problems
Java template code:
    public String minWindow(String s, String t) {
        int[] arr = new int[64];        
        int counter=t.length(), begin=0, head=0;//two pointers, one point to tail and one  head
        int d=Integer.MAX_VALUE;//the length of substring
        for(char c: t.toCharArray()) arr[c-'A']++;/* initialize the hash map here */
        for(int end=0;end<s.length();end++){
            if(arr[s.charAt(end)-'A']-->0) counter--;  /* modify counter here */
            while(counter==0){ /* counter condition */
                /* update d here if finding minimum*/
                if(end+1-begin<d) {
                    head=begin;
                    d=end+1-begin;
                } 
                //increase begin to make it invalid/valid again
                if(arr[s.charAt(begin)-'A']++==0) counter++;   /*modify counter here*/
                begin++;                
            }
            /* update d here if finding maximum*/
        }
        return d==Integer.MAX_VALUE? "":s.substring(head, head+d);    
    }
    //for_end{while_cnt{begin+_if_end-begin}}

3.2.3 https://leetcode.com/problems/binary-subarrays-with-sum/submissions/ , code follow similar tempalte:
    public int numSubarraysWithSum(int[] nums, int goal) {
        int ans=0;
        if(goal==0){
            ...
        }
        int begin=0,sum=0,count=1;
        for(int end=0;end<nums.length;end++){
            sum+=nums[end];// modify counter here             
            if(sum==goal){// counter condition 
                if(end+1<nums.length && nums[end+1]==0){count++;continue;}                
                while(begin<end+1 && nums[begin]==0) {ans+=count;begin++;}
                ans+=count;
                //increase begin to make it invalid/valid again
                if(begin<nums.length && nums[begin]==1){sum--; begin++;count=1;}                
            }
        }
        return ans;
    }
    //for-end-{while-begin+-if-end-begin}

