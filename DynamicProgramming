8, 动态规划 Dynamic Programming 
    使⽤条件 • ◦◦
        使⽤场景： 
            求⽅案总数(90%) 
            求最值(80%)
            ◦ 求可⾏性(80%)
    • 不适⽤的场景： 
        ◦ 找所有具体的⽅案（准确率99%） 
        ◦ 输⼊数据⽆序(除了背包问题外，准确率60%~70%) 
        ◦ 暴⼒算法已经是多项式时间复杂度（准确率80%） 
    • 动态规划四要素(对⽐递归的四要素)： 
        ◦ 状态 (State) -- 递归的定义 
        ◦ ⽅程 (Function) -- 递归的拆解 
        ◦ 初始化 (Initialization) -- 递归的出⼝ 
        ◦ 答案 (Answer) -- 递归的调⽤ 
    • ⼏种常⻅的动态规划： 
        • 背包型 
            ◦ 给出 n 个物品及其⼤⼩,问是否能挑选出⼀些物品装满⼤⼩为m的背包 
            ◦ 题⽬中通常有“和”与“差”的概念，数值会被放到状态中 
            ◦ 通常是⼆维的状态数组，前 i 个组成和为 j 状态数组的⼤⼩需要开 (n + 1) * (m + 1) 
            ◦ ⼏种背包类型： 
                ▪ 01背包 
                    • 状态 state 
                        dp[i][j] 表⽰前 i 个数⾥挑若⼲个数是否能组成和为 j 
                    ⽅程 function 
                        dp[i][j] = dp[i - 1][j] or dp[i - 1][j - A[i - 1]] 如果 j >= A[i - 1] dp[i][j] = dp[i - 1][j] 
                        如果 j < A[i - 1] 第 i 个数的下标是 i - 1，所以⽤的是 A[i - 1] ⽽不是 A[i] 
                    初始化 initialization
                        dp[0][0] = true dp[0][1...m] = false 
                    答案 answer 
                        使得 dp[n][v], 0 s <= v <= m 为 true 的最⼤ v 
                ▪ 多重背包 
                    • 状态 state 
                        dp[i][j] 表⽰前i个物品挑出⼀些放到 j 的背包⾥的最⼤价值和 
                    ⽅程 function 
                        dp[i][j] = max(dp[i - 1][j - count * A[i - 1]] + count * V[i - 1]) 其中 0 <= count <= j / A[i - 1] 
                    初始化 initialization
                        dp[0][0..m] = 0 
                    答案 
                        answer dp[n][m] 
                • 区间型 
                    • 题⽬中有 subarray / substring 的信息 
                        ◦ ⼤区间依赖⼩区间 
                        ◦ ⽤ dp[i][j] 表⽰数组/字符串中 i, j 这⼀段区间的最优值/可⾏性/⽅案总数 
                        ◦ 状态 state 
                            dp[i][j] 表⽰数组/字符串中 i,j 这⼀段区间的最优值/可⾏性/⽅案总数 
                         ⽅程 function 
                            dp[i][j] = max/min/sum/or(dp[i,j 之内更⼩的若⼲区间]) 
                • 匹配型 
                    ◦ 通常给出两个字符串 
                    ◦ 两个字符串的匹配值依赖于两个字符串前缀的匹配值 
                    ◦ 字符串⻓度为 n,m 则需要开 (n + 1) x (m + 1) 的状态数组 
                    ◦ 要初始化 dp[i][0] 与 dp[0][i] 
                    ◦ 通常都可以⽤滚动数组进⾏空间优化 
                    ◦ 状态 state 
                        dp[i][j] 表⽰第⼀个字符串的前 i 个字符与第⼆个字符串的前 j 个字符怎么样怎么样 (max/min/sum/or) 
                • 划分型 
                    ◦ 是前缀型动态规划的⼀种, 有前缀的思想 
                    ◦ 如果指定了要划分为⼏个部分： 
                        ▪ dp[i][j] 表⽰前i个数/字符划分为j个 部分的最优值/⽅案数/可⾏性 
                    ◦ 如果没有指定划分为⼏个部分: 
                        ▪ dp[i] 表⽰前i个数/字符划分为若⼲个 部分的最优值/⽅案数/可⾏性 
                    ◦ 状态 state 
                        指定了要划分为⼏个部分: dp[i][j] 表⽰前i个数/字符划分为j个部分的最优值/⽅案数/可⾏ 性
                        没有指定划分为⼏个部分: dp[i] 表⽰前i个数/字符划分为若⼲个部分的最优值/⽅案数/可⾏ 性 
                • 接⻰型 
                    ◦ 通常会给⼀个接⻰规则，问你最⻓的⻰有多⻓ 
                    ◦ 状态表⽰通常为: dp[i] 表⽰以坐标为 i 的元素结尾的最⻓⻰的⻓度 
                    ◦ ⽅程通常是: dp[i] = max{dp[j] + 1}, j 的后⾯可以接上 i 
                    ◦ LIS 的⼆分做法选择性的掌握，但并不是所有的接⻰型DP都可以⽤⼆分来优化 
                    ◦ 状态 state
                        状态表⽰通常为: dp[i] 表⽰以坐标为 i 的元素结尾的最⻓⻰的⻓度 
                        ⽅程 function dp[i] = max{dp[j] + 1}, j 的后⾯可以接上 i
                
    复杂度 
        • 时间复杂度: 
            ◦ O(状态总数 * 每个状态的处理耗费) 
            ◦ 等于O(状态总数 * 决策数) 
        • 空间复杂度： 
            ◦ O(状态总数) (不使⽤滚动数组优化) 
            ◦ O(状态总数 / n)(使⽤滚动数组优化, n是被滚动掉的那⼀个维度)
8.1 匹配型                                                                                             
--dp[n+1][m+1],dp[i][0],dp[0][j],for-i-for-j-dp[i][j]
https://leetcode.com/problems/wildcard-matching/submissions/
8.2 划分型                                                                                                                     
--dp[len+1]-for-for-dp[i] or dp[m+1][n+1]-for-for-dp[i][j]
https://leetcode.com/problems/word-break/
8.3 接龙型
--dp[j]=max(dp[j],dp[i]+1)
https://leetcode.com/problems/longest-increasing-subsequence/                                                                           
8.4 01 背包
--dp[n+1][sum+1]--for-for-dp[i][j] = dp[i][j] or || dp[i-1][j-nums[i-1]]
--dp[sum+1]--for-for-dp[j] = dp[j] || dp[j-nums[i]]
https://leetcode.com/problems/partition-equal-subset-sum/
8.5 多重背包
8.6 区间型                                                             
--for-interval-for-i-for-j+ineterval-dp[i][j] = max/min/sum/or(dp[smaller interval inside i,j])
https://leetcode.com/problems/minimum-cost-to-merge-stones/submissions/
