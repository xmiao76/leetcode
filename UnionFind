10, 并查集 Union Find 
使⽤条件 
    • 需要查询图的连通状况的问题 
    • 需要⽀持快速合并两个集合的问题 复杂度 
    • 时间复杂度 union O(1), find O(1) 
    • 空间复杂度 O(n)                                                            
--UnionFind(parent,size)-union(merge root)-find(return root)                 
Sample: 
    721. Accounts Merge: https://leetcode.com/problems/accounts-merge/
https://app.diagrams.net/#G11Mg-MMBDKGtiloYpXZzu1-WvUPWj7aSY#%7B%22pageId%22%3A%224pWmP0SnhOm66gt2bKk7%22%7D
        class UnionFind {
            int[] parent;
            int[] weight;

            public UnionFind(int num) {
                parent = new int[num];
                weight = new int[num];

                for(int i =  0; i < num; i++) {
                    parent[i] = i;
                    weight[i] = 1;
                }
            }

            public void union(int a, int  b) {
                int rootA = root(a);
                int rootB = root(b);

                if (rootA == rootB) {
                    return;
                }

                if (weight[rootA] > weight[rootB]) {
                    parent[rootB] = rootA;
                    weight[rootA] += weight[rootB];
                } else {
                    parent[rootA] = rootB;
                    weight[rootB] += weight[rootA];
                }
            }

            public int root(int a) {
                if (parent[a] == a) {
                    return a;
                }

                //return root(parent[a]);
                parent[a] = root(parent[a]);
                return parent[a];            
            }
        }                                                                                                        
    803. Bricks Falling When Hit , https://leetcode.com/problems/bricks-falling-when-hit/ , https://www.youtube.com/watch?v=qItIA8m3OnU
        private class UnionFind {

            /**
             * 当前结点的父亲结点
             */
            private int[] parent;
            /**
             * 以当前结点为根结点的子树的结点总数
             */
            private int[] size;

            public UnionFind(int n) {
                parent = new int[n];
                size = new int[n];
                for (int i = 0; i < n; i++) {
                    parent[i] = i;
                    size[i] = 1;
                }
            }

            /**
             * 路径压缩，只要求每个不相交集合的「根结点」的子树包含的结点总数数值正确即可，因此在路径压缩的过程中不用维护数组 size
             *
             * @param x
             * @return
             */
            public int find(int x) {
                if (x != parent[x]) {
                    parent[x] = find(parent[x]);
                }
                return parent[x];
            }

            public void union(int x, int y) {
                int rootX = find(x);
                int rootY = find(y);

                if (rootX == rootY) {
                    return;
                }
                parent[rootX] = rootY;
                // 在合并的时候维护数组 size
                size[rootY] += size[rootX];
            }

            /**
             * @param x
             * @return x 在并查集的根结点的子树包含的结点总数
             */
            public int getSize(int x) {
                int root = find(x);
                return size[root];
            }
        }
