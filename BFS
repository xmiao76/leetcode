7,宽度优先搜索 BFS
    拓扑排序(100%) 
    出现连通块的关键词(100%) 
    分层遍历(100%) 
    简单图最短路径(100%) 
    给定⼀个变换规则，从初始状态变到终⽌状态最少⼏步(100%) 
    时间复杂度：O(n + m) n 是点数, m 是边数 
    空间复杂度：O(n)

oneline template:
--queue.offer-distance0-while(!queue){queue.poll-if-continue-for{if-continue-queue.offer-distance+}}
    
7.1,
https://leetcode.com/problems/01-matrix/
https://leetcode.com/problems/01-matrix/discuss/1499453/JAVA-%2B-BFS-SOLUTION-WITH-BETTER-INTUITION
https://app.diagrams.net/#G1jFbaMLjEEPUSl-6b9KAK30a8_4HkFov8#%7B%22pageId%22%3A%22NqYn7Y-sS32tGTjHOPWD%22%7D
    
ReturnType bfs(Node startNode) { 
    // BFS 必须要⽤队列 queue，别⽤栈 stack！ 
    Queue<Node> queue = new ArrayDeque<>(); 
    // hashmap 有两个作⽤，⼀个是记录⼀个点是否被丢进过队列了，避免重复访问 
    // 另外⼀个是记录 startNode 到其他所有节点的最短距离 
    // 如果只求连通性的话，可以换成 HashSet 就⾏ 
    // node 做 key 的时候⽐较的是内存地址 
    Map<Node, Integer> distance = new HashMap<>(); 
    // 把起点放进队列和哈希表⾥，如果有多个起点，都放进去 
    queue.offer(startNode); 
    distance.put(startNode, 0); // or 1 if necessary 
    
    // while 队列不空，不停的从队列⾥拿出⼀个点，拓展邻居节点放到队列中 
    while (!queue.isEmpty()) { 
        Node node = queue.poll(); 
        // 如果有明确的终点可以在这⾥加终点的判断 
        if (node 是终点) { 
        break or return something; 
        } 
        for (Node neighbor : node.getNeighbors()) { 
            if (distance.containsKey(neighbor)) { 
                continue; 
            } 
            queue.offer(neighbor); 
            distance.put(neighbor, distance.get(node) + 1); 
        } 
    } 
    // 如果需要返回所有点离起点的距离，就 return hashmap 
    return distance; 
    // 如果需要返回所有连通的节点, 就 return HashMap ⾥的所有点 
    return distance.keySet(); 
    // 如果需要返回离终点的最短距离 
    return distance.get(endNode); 
}

7.2,
https://leetcode.com/problems/number-of-connected-components-in-an-undirected-graph
https://leetcode.com/problems/number-of-connected-components-in-an-undirected-graph/discuss/77651/Standard-BFS-and-DFS-Solution-JAVA
https://app.diagrams.net/#G10YXCulVtuaiW0x9vPvcstmY2ntitlUbM#%7B%22pageId%22%3A%22CqyYHzIq8lOrVj9QGvZA%22%7D
