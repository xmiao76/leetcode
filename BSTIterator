6,BST Iterator
使⽤条件 
• ⽤⾮递归的⽅式（Non-recursion / Iteration）实现⼆叉树的中序遍历 
• 常⽤于 BST 但不仅仅可以⽤于 BST 
复杂度 
时间复杂度 O(n) 
空间复杂度 O(n)
oneline template:
    while(!cur||!stack)){while(!cur){add,cur=left}pop,cur=right}

https://leetcode.com/problems/binary-tree-inorder-traversal/
https://app.diagrams.net/#G1CKEdCfdX-bIBt5IVq-p57RHFMSMG5dUS#%7B%22pageId%22%3A%22_eL227X9seFj_DLrU57p%22%7D

public List<Integer> inorderTraversal(TreeNode root) {
        List<Integer> list = new ArrayList<Integer>();

        Stack<TreeNode> stack = new Stack<TreeNode>();
        TreeNode cur = root;

        while(cur!=null || !stack.empty()){
            while(cur!=null){
                stack.add(cur);
                cur = cur.left;
            }
            cur = stack.pop();
            list.add(cur.val);
            cur = cur.right;
        }

        return list;
    }
    
https://leetcode.com/problems/kth-smallest-element-in-a-bst/    
https://app.diagrams.net/#G1mARZ5K1GODJ2-4m_3J6wdGgaX2RjcyTs#%7B%22pageId%22%3A%22_eL227X9seFj_DLrU57p%22%7D
    public int kthSmallest(TreeNode root, int k) {
      Stack<TreeNode> stack = new Stack<TreeNode>();
        TreeNode cur = root;

        while(cur!=null || !stack.empty()){
            while(cur!=null){
                stack.add(cur);
                cur = cur.left;
            }
            cur = stack.pop();
            k--;
            if(k==0) break;
            cur = cur.right;
        }
        
        if(cur==null) return -1;
        else return cur.val;
    }

(better:)
    int i=0,result=0;
    boolean found = false;
    public int kthSmallest(TreeNode root, int k) {
        inorder(root,k);
        return result;
    }
    
    void inorder(TreeNode root,int k){
        if(root!=null&&!found){            
            inorder(root.left,k);
            if(++i==k) {
                found = true;
                result = root.val;
            }
            inorder(root.right,k);
        }       
    }
