3,Two Points code template
滑动窗⼝ (90%) 
时间复杂度要求 O(n) (80%是双指针) 
要求原地操作，只可以使⽤交换，不能使⽤额外空间 (80%) 
有⼦数组 subarray /⼦字符串 substring 的关键词 (50%) 
有回⽂ Palindrome 关键词(50%) 
时间复杂度：O(n) 时间复杂度与最内层循环主体的执⾏次数有关 与有多少重循环⽆关 
空间复杂度：O(1) 只需要分配两个指针的额外内存
3.1 https://leetcode.com/problems/binary-subarrays-with-sum/discuss/1353347/Java-3-O(N)-Time-Solutions

3.2 https://leetcode.com/problems/minimum-window-substring/discuss/26808/Here-is-a-10-line-template-that-can-solve-most-'substring'-problems
Java template code:
class Solution {
    public String minWindow(String s, String t) {
        int[] arr = new int[64];        
        int counter=t.length(), begin=0, head=0;//two pointers, one point to tail and one  head
        int d=Integer.MAX_VALUE;//the length of substring
        for(char c: t.toCharArray()) arr[c-'A']++;/* initialize the hash map here */
        for(int end=0;end<s.length();end++){
            if(arr[s.charAt(end)-'A']-->0) counter--;  /* modify counter here */
            while(counter==0){ /* counter condition */
                /* update d here if finding minimum*/
                if(end+1-begin<d) {
                    head=begin;
                    d=end+1-begin;
                } 
                //increase begin to make it invalid/valid again
                if(arr[s.charAt(begin++)-'A']++==0) counter++;   /*modify counter here*/
            }
            /* update d here if finding maximum*/
        }
        return d==Integer.MAX_VALUE? "":s.substring(head, head+d);    
    }
}

https://leetcode.com/problems/binary-subarrays-with-sum/submissions/ , code follow similar tempalte:
    public int numSubarraysWithSum(int[] nums, int goal) {
        int ans=0;
        if(goal==0){
            ...
        }
        int begin=0,end=0,sum=0;
        while(end<nums.length){
            sum+=nums[end];/* modify counter here */
            end++;
            if(sum==goal){/* counter condition */
                int count=1;
                while(begin<end && nums[begin]==0) {count++;begin++;}
                while(end<nums.length && nums[end]==0){ ans+=count;end++;}
                ans+=count;
                //increase begin to make it invalid/valid again
                if(begin<nums.length && nums[begin]==1){sum--; begin++;}
            }
        }
        return ans;
        
    }
    
3.3 Two-Pointers-Template-for-nSum problem: 
https://leetcode.com/problems/3sum/discuss/820254/Two-Pointers-Template-for-such-problems-!-Python3-AC(for-while template, to be translated to java)

https://leetcode.com/problems/3sum/submissions/ (use for-while template, todo)
